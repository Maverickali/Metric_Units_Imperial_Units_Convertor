// <auto-generated />
using System;
using Imperial_Metric.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Imperial_Metric.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Imperial_Metric.Domain.Entities.Conversions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("conversionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Conversions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            conversionName = "Length"
                        },
                        new
                        {
                            Id = 2,
                            conversionName = "Mass"
                        },
                        new
                        {
                            Id = 3,
                            conversionName = "Speed"
                        },
                        new
                        {
                            Id = 4,
                            conversionName = "Temperature"
                        },
                        new
                        {
                            Id = 5,
                            conversionName = "Pressure"
                        },
                        new
                        {
                            Id = 6,
                            conversionName = "Volume"
                        });
                });

            modelBuilder.Entity("Imperial_Metric.Domain.Entities.ConversionsRates", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double>("ConversionFactor")
                        .HasColumnType("double precision");

                    b.Property<int>("ConversionId")
                        .HasColumnType("integer");

                    b.Property<double>("ConversionOffset")
                        .HasColumnType("double precision");

                    b.Property<string>("FromUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ToUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConversionId");

                    b.ToTable("ConversionsRates");

                    b.HasData(
                        new
                        {
                            Id = "ca85a610-758f-4084-9f59-01b14bbe1096",
                            ConversionFactor = 1.8,
                            ConversionId = 4,
                            ConversionOffset = 32.0,
                            FromUnit = "Celsius",
                            Name = "Celsius to Fahrenheit",
                            ToUnit = "Fahrenheit"
                        },
                        new
                        {
                            Id = "325898d5-5345-4c31-b0bb-27c70b67b2c3",
                            ConversionFactor = 0.55555555560000003,
                            ConversionId = 4,
                            ConversionOffset = -32.0,
                            FromUnit = "Fahrenheit",
                            Name = "Fahrenheit to Celsius",
                            ToUnit = "Celsius"
                        },
                        new
                        {
                            Id = "e6cd08d6-1f56-421a-8739-cd341c375304",
                            ConversionFactor = 3.2808398950000002,
                            ConversionId = 1,
                            ConversionOffset = 0.0,
                            FromUnit = "Meters",
                            Name = "Meters to Feet",
                            ToUnit = "Feet"
                        },
                        new
                        {
                            Id = "c0a91389-02d4-4cdf-8617-1cfcc26710a7",
                            ConversionFactor = 1.09361,
                            ConversionId = 1,
                            ConversionOffset = 0.0,
                            FromUnit = "Meters",
                            Name = "Meters to Yard",
                            ToUnit = "Yard"
                        },
                        new
                        {
                            Id = "086eaeab-82e0-4011-aebe-c53cb6a636dc",
                            ConversionFactor = 0.30480000000000002,
                            ConversionId = 1,
                            ConversionOffset = 0.0,
                            FromUnit = "Feet",
                            Name = "Feet to Meters",
                            ToUnit = "Meters"
                        },
                        new
                        {
                            Id = "8b913812-e46d-4f27-bb54-7781a12e7868",
                            ConversionFactor = 2.2046199999999998,
                            ConversionId = 2,
                            ConversionOffset = 0.0,
                            FromUnit = "Kilograms",
                            Name = "Kilograms to Pounds",
                            ToUnit = "Pounds"
                        },
                        new
                        {
                            Id = "db39c82b-7c59-4ae0-a2f1-55e5c259cbca",
                            ConversionFactor = 0.453592,
                            ConversionId = 2,
                            ConversionOffset = 0.0,
                            FromUnit = "Pounds",
                            Name = "Pounds to Kilograms",
                            ToUnit = "Kilograms"
                        },
                        new
                        {
                            Id = "d7106147-1919-4ee0-b2b4-7e71c3fd0cf6",
                            ConversionFactor = 0.26417200000000002,
                            ConversionId = 6,
                            ConversionOffset = 0.0,
                            FromUnit = "Liters",
                            Name = "Liters to Gallons",
                            ToUnit = "Gallons"
                        },
                        new
                        {
                            Id = "c235365c-d650-4878-8f08-7283d235e12d",
                            ConversionFactor = 3.7854100000000002,
                            ConversionId = 6,
                            ConversionOffset = 0.0,
                            FromUnit = "Gallons",
                            Name = "Gallons to Liters",
                            ToUnit = "Liters"
                        },
                        new
                        {
                            Id = "13df1109-8030-45a1-9d9f-6f2ae5abea67",
                            ConversionFactor = 0.000145038,
                            ConversionId = 5,
                            ConversionOffset = 0.0,
                            FromUnit = "Pascals",
                            Name = "Pascals to PSI",
                            ToUnit = "PSI"
                        },
                        new
                        {
                            Id = "78da5326-cd36-4f8b-bce6-638b9803d77f",
                            ConversionFactor = 6894.7600000000002,
                            ConversionId = 5,
                            ConversionOffset = 0.0,
                            FromUnit = "PSI",
                            Name = "PSI to Pascals",
                            ToUnit = "Pascals"
                        },
                        new
                        {
                            Id = "ac8cf8f2-24e1-4d00-9a34-0e45f40767e8",
                            ConversionFactor = 0.62137100000000001,
                            ConversionId = 3,
                            ConversionOffset = 0.0,
                            FromUnit = "Kilometers per hour",
                            Name = "Kilometers to Miles",
                            ToUnit = "Miles per hour"
                        },
                        new
                        {
                            Id = "9c47df94-775e-434e-8cf4-43365a8d3ce1",
                            ConversionFactor = 1.60934,
                            ConversionId = 3,
                            ConversionOffset = 0.0,
                            FromUnit = "Miles per hour",
                            Name = "Miles to Kilometers",
                            ToUnit = "Kilometers per hour"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Imperial_Metric.Domain.Entities.ConversionsRates", b =>
                {
                    b.HasOne("Imperial_Metric.Domain.Entities.Conversions", "Conversion")
                        .WithMany()
                        .HasForeignKey("ConversionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
